####The plan is to compute cobordism without knowing the
####group law

import time

T = time.time()

###I made a stupid mistake and now am too lazy to change
#######################################################
##This defines the rank of the group
m = 3
n = m+1
### m is rank of group, n is the number of variables

####################################################
####################################################
##Here's the group
W = WeylGroup(["A",m],prefix="s")
s = W.simple_reflections()
w0 = W.long_element(); w0
e = s[0]*s[0]
e_w0 = W.bruhat_interval(e,w0); e_w0

############################################
############################################
##Defining variables
x = []
y = []
for i in range(n):
	x.append('x' + str(i))
	y.append('y' + str(i))
z = []
u = []

for i in range(n):
        z.append([])
        u.append([])
	for j in range(n):
                zed = 'z' + str(i) + str(j)
                you = 'u' + str(i) + str(j)
                z[-1] += [zed]
                u[-1] += [you]
for i in range(len(x)):
	x[i] = var(x[i])
	y[i] = var(y[i])
for i in range(n):
	for j in range(n):
		z[i][j] = var(z[i][j])
		u[i][j] = var(u[i][j])
#print x, y , z, u
##########################################
##########################################
##Defining the list of simple reflections
##
nList = range(1,n+1)

tranList = []
for i in range(n-1):
    temp = nList[:]
    temp[i] = i+2
    temp[i+1] = i+1
    tranList.append(temp)
print "This is tranList: ", tranList

#T = []
#for i in range(n-1):
#    T+=[Permutation(tranList[i])]

##############################################
##############################################
##Defining the group law
var('a,b')
def oplus(a,b):
    return (a + b)

#######################################
#######################################
##Defining the Demazure operators

def T1(P):
     temp(z00,z01,z02,z03,z10,z11,z12,z13,z20,z21,z22,z23,z30,z31,z32,z33,u01,u10,u12,u21,u23,u32,u02,u20,u13,u31,u03,u30) = P
     return temp(z10,z11,z12,z13,z00,z01,z02,z03,z20,z21,z22,z23,z30,z31,z32,z33,u10,u01,u02,u20,u23,u32,u12,u21,u03,u30,u13,u31)
def T2(P):
    temp(z00,z01,z02,z03,z10,z11,z12,z13,z20,z21,z22,z23,z30,z31,z32,z33,u01,u10,u12,u21,u23,u32,u02,u20,u13,u31,u03,u30) = P
    return temp(z00,z01,z02,z03,z20,z21,z22,z23,z10,z11,z12,z13,z30,z31,z32,z33,u02,u20,u21,u12,u13,u31,u01,u10,u23,u32,u03,u30)
def T3(P):
    temp(z00,z01,z02,z03,z10,z11,z12,z13,z20,z21,z22,z23,z30,z31,z32,z33,u01,u10,u12,u21,u23,u32,u02,u20,u13,u31,u03,u30) = P
    return temp(z00,z01,z02,z03,z10,z11,z12,z13,z30,z31,z32,z33,z20,z21,z22,z23,u01,u10,u13,u31,u32,u23,u03,u30,u12,u21,u02,u20)
def A1(P):
        return (P/u01 + T1(P)/u10)
def A2(P):
        return (P/u12 + T2(P)/u21)
def A3(P):
        return (P/u23 + T3(P)/u32)

D = [A1,A2,A3]
#for i in range(n):
#	D.append(lambda P: P/u01 + Ti(P)/u10)
#def Demazure(list, P):
#		for i in range(len(list)):
#			temp = D[list[i]-1](P)
#		return temp.simplify_full()
		
################################################
################################################
##Defining the top class

Pempty = 1
for i in range(m):
	for j in range(m-i):
		Pempty *= z[i][j]
#print Pempty

######################################################
######################################################
##Computing all classes without knowing the group law

AList = []

for i in (e_w0):
		AList+= i.reduced_words() 
AList.reverse()
#print AList
RList = [Pempty]

for i in AList[1:]:
		itemp = i[1:]
		P = RList[AList.index(itemp)]
		RList.append(D[i[0]-1](P).simplify_full())

#print "Done", "Here is the last one", RList[-1]

##I checked that last one, it is correct.

######################################################
######################################################
##Applying the group law

def valuation(P):
    temp(z00,z01,z02,z03,z10,z11,z12,z13,z20,z21,z22,z23,z30,z31,z32,z33,u01,u10,u12,u21,u23,u32,u02,u20,u13,u31,u03,u30)=P
    return temp(oplus(x0,-y0),oplus(x0,-y1),oplus(x0,-y2),oplus(x0,-y3),oplus(x1,-y0),oplus(x1,-y1),oplus(x1,-y2),oplus(x1,-y3),oplus(x2,-y0),oplus(x2,-y1),oplus(x2,-y2),oplus(x2,-y3),oplus(x3,-y0),oplus(x3,-y1),oplus(x3,-y2),oplus(x3,-y3),oplus(x0,-x1),oplus(x1,-x0),oplus(x1,-x2),oplus(x2,-x1),oplus(x2,-x3),oplus(x3,-x2),oplus(x0,-x2),oplus(x2,-x0),oplus(x1,-x3),oplus(x3,-x1),oplus(x0,-x3),oplus(x3,-x0))
SList = []
for i in range(len(RList)):
		SList.append(valuation(RList[i]).simplify_full())

##############################################################
##############################################################
##Print result

for i in range(len(AList)):
		print "Z", AList[i] , " = ", SList[i]

print "Took ", time.time() - T

###Checked! Equivariant cohomology works perfectly, took 2 minutes.